// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Event
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Id             int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Sport          string  `protobuf:"bytes,2,opt,name=sport" json:"sport,omitempty"`
	Category       string  `protobuf:"bytes,3,opt,name=category" json:"category,omitempty"`
	Tournament     string  `protobuf:"bytes,4,opt,name=tournament" json:"tournament,omitempty"`
	Round          string  `protobuf:"bytes,5,opt,name=round" json:"round,omitempty"`
	TeamA          string  `protobuf:"bytes,6,opt,name=team_a,json=teamA" json:"team_a,omitempty"`
	TeamB          string  `protobuf:"bytes,7,opt,name=team_b,json=teamB" json:"team_b,omitempty"`
	Score          string  `protobuf:"bytes,8,opt,name=score" json:"score,omitempty"`
	State          string  `protobuf:"bytes,9,opt,name=state" json:"state,omitempty"`
	StartTimestamp float64 `protobuf:"fixed64,10,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetSport() string {
	if m != nil {
		return m.Sport
	}
	return ""
}

func (m *Event) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Event) GetTournament() string {
	if m != nil {
		return m.Tournament
	}
	return ""
}

func (m *Event) GetRound() string {
	if m != nil {
		return m.Round
	}
	return ""
}

func (m *Event) GetTeamA() string {
	if m != nil {
		return m.TeamA
	}
	return ""
}

func (m *Event) GetTeamB() string {
	if m != nil {
		return m.TeamB
	}
	return ""
}

func (m *Event) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *Event) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Event) GetStartTimestamp() float64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Event)(nil), "test.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Events service

type EventsClient interface {
	PostEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) PostEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/test.Events/PostEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Events service

type EventsServer interface {
	PostEvent(context.Context, *Event) (*Event, error)
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_PostEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).PostEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Events/PostEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).PostEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostEvent",
			Handler:    _Events_PostEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0x49, 0xbe, 0x26, 0x5f, 0x33, 0x42, 0x0b, 0x8b, 0x85, 0x21, 0x88, 0x48, 0x2e, 0x8a,
	0x87, 0x46, 0xf4, 0x26, 0x5e, 0x14, 0xf4, 0x2c, 0xc1, 0x7b, 0xd9, 0xb6, 0x4b, 0x08, 0x98, 0x9d,
	0xb0, 0x99, 0x16, 0xbc, 0xf6, 0x15, 0x7c, 0x34, 0x5f, 0xc1, 0x07, 0x71, 0x33, 0x5b, 0x6b, 0x6f,
	0xf3, 0xfb, 0xcd, 0xee, 0xec, 0xec, 0x1f, 0x80, 0x4d, 0xcf, 0xf3, 0xce, 0x11, 0x93, 0x1a, 0x0d,
	0x75, 0x7e, 0x56, 0x13, 0xd5, 0xef, 0xa6, 0xd4, 0x5d, 0x53, 0x6a, 0x6b, 0x89, 0x35, 0x37, 0x64,
	0xfb, 0x70, 0xa6, 0xd8, 0xc5, 0x90, 0x3c, 0x6f, 0x8d, 0x65, 0x35, 0x81, 0xb8, 0x59, 0x63, 0x74,
	0x11, 0x5d, 0x25, 0x95, 0xaf, 0xd4, 0x29, 0x24, 0x7d, 0x47, 0x8e, 0x31, 0xf6, 0x2a, 0xab, 0x02,
	0xa8, 0x1c, 0xc6, 0x2b, 0xcd, 0xa6, 0x26, 0xf7, 0x81, 0xff, 0xa4, 0x71, 0x60, 0x75, 0xee, 0x5f,
	0xa7, 0x8d, 0xb3, 0xba, 0xf5, 0xf3, 0x70, 0x24, 0xdd, 0x23, 0x33, 0x4c, 0x74, 0xb4, 0xb1, 0x6b,
	0x4c, 0xc2, 0x44, 0x01, 0x35, 0x83, 0x94, 0x8d, 0x6e, 0x17, 0x1a, 0xd3, 0xa0, 0x07, 0x7a, 0x3c,
	0xe8, 0x25, 0xfe, 0xff, 0xd3, 0x4f, 0xb2, 0xd5, 0x8a, 0x9c, 0xc1, 0xf1, 0x7e, 0xab, 0x01, 0xc4,
	0xfa, 0x7f, 0x19, 0xcc, 0xf6, 0x76, 0x00, 0x75, 0x09, 0x53, 0x5f, 0x38, 0x5e, 0x70, 0xd3, 0xfa,
	0x24, 0x74, 0xdb, 0x21, 0xf8, 0x7e, 0x54, 0x4d, 0x44, 0xbf, 0xfd, 0xda, 0xdb, 0x17, 0x48, 0x25,
	0x83, 0x5e, 0x3d, 0x40, 0xf6, 0x4a, 0x3d, 0x87, 0x44, 0x4e, 0xe6, 0x12, 0xa6, 0x40, 0x7e, 0x0c,
	0xc5, 0x6c, 0xf7, 0xf5, 0xfd, 0x19, 0x4f, 0x0b, 0x28, 0xb7, 0x37, 0xa5, 0x91, 0xab, 0xf7, 0xd1,
	0xf5, 0x32, 0x95, 0x4c, 0xef, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x85, 0x45, 0xfe, 0xd2, 0x85,
	0x01, 0x00, 0x00,
}
